import httplib
import random
import re

from urlparse import urlparse

from gamecache import GetCache

LAZYMAN_SERVER = '104.251.218.27'
ART = 'nhlbg.jpg'
THUMB = 'nhl_logo.png'

BITRATES = {
	1200: 360,
	2500: 540,
	3500: 720,
	5000: 720
}

HTTP_HEADERS = {
	'Client-ID': 'gzux2tt85x9ppnnxyh7czkfiovtxtd7'
}

def GetRealUrl(url, cdn):
	return HTTP.Request(url + cdn).content

def CheckUrl(url, cookie):
	parsed_url = urlparse(url)
	h1 = httplib.HTTPConnection(parsed_url.netloc)
	h1.request('HEAD', url, headers={ "Cookie": cookie })
	return h1.getresponse().status == 200

def GetMediaAuth():
	salt = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
	garbled = ''.join(random.sample(salt, len(salt)))
	auth = ''.join([garbled[int(i * random.random()) % len(garbled)] for i in range(0,241)])
	return auth

####################################################################################################
def NormalizeURLE(url):
	Log('Got url to norm: %s' % url)
	return url.split('?')[0].split('#')[0].rstrip('/')

####################################################################################################


def MetadataObjectForURL(url):
	crap, date, feed_id = url.rsplit('/', 2)
	Log('MetadataObjectForURL: %s, %s' % (url, feed_id))

	game = None
	for g in GetCache(date):
		Log('GAME_CACHE game %s', g.game_id)
		for feed in g.feeds:
			if feed.mediaId == feed_id:
				game = g
				break
		if game != None:
			break
	
	title = "No title found"
	summary = "No summary"
	
	if game != None:
		title = game.title
		summary = game.summary

	return VideoClipObject(
		title = title,
		summary = summary,
		year = int(date[0:4]),
		studio = "NHL",
		thumb = R(THUMB),
		art = R(ART)
	)

def GetStreams(master_stream_url):
	info_pattern = re.compile('EXT-X-STREAM-INF:BANDWIDTH=(\d+),RESOLUTION=(\d+)x(\d+),CODECS=".+"')
	streams = HTTP.Request(master_stream_url).content.split("#")
	objects = []

	for stream in streams:
		if stream.strip() == "EXTM3U" or stream == "":
			continue
		info, url_end = stream.splitlines()
		stream_meta = info_pattern.search(info)
		if stream_meta == None:
			continue
		bw, width_s, height_s = stream_meta.groups()
		res_url = master_stream_url.rsplit('/', 1)[0] + "/" + url_end
		objects.append(
			MediaObject(
				protocol = 'hls',
				video_codec = VideoCodec.H264,
				video_frame_rate = 30,
				audio_codec = AudioCodec.AAC,
				video_resolution = height_s,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [
					PartObject(key = HTTPLiveStreamURL(Callback(PlayVideo, url=res_url)))
				]
			)
		)

	return objects

####################################################################################################
def MediaObjectsForURL(url):

	cdn = 'akc'
	real_url = HTTP.Request(url + cdn).content
	Log('Got url %s -> %s' % (url, real_url))

	return GetStreams(real_url)

####################################################################################################
@indirect
def PlayVideo(url):

	Log(' --> Final video_url: %s' % (url))

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))
